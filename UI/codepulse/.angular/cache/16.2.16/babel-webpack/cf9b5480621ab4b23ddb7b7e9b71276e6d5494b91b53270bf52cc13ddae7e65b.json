{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nclass AuthInterceptor {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n  }\n  intercept(request, next) {\n    if (this.shouldInterceptRequest(request)) {\n      const authRequest = request.clone({\n        setHeaders: {\n          'Authorization': this.cookieService.get('Authorization')\n        }\n      });\n      return next.handle(authRequest);\n    }\n    return next.handle(request);\n  }\n  shouldInterceptRequest(request) {\n    return request.urlWithParams.indexOf('addAuth=true', 0) > -1 ? true : false;\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.CookieService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}\nexport { AuthInterceptor };","map":{"version":3,"names":["AuthInterceptor","constructor","cookieService","intercept","request","next","shouldInterceptRequest","authRequest","clone","setHeaders","get","handle","urlWithParams","indexOf","i0","ɵɵinject","i1","CookieService","factory","ɵfac"],"sources":["D:\\Repos\\CodePulse\\UI\\codepulse\\src\\app\\core\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor( private cookieService: CookieService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if(this.shouldInterceptRequest(request))\n    {      \n    const authRequest = request.clone({\n      setHeaders: { \n        'Authorization' : this.cookieService.get('Authorization')\n      }\n    });\n    return next.handle(authRequest);\n  }\n  return next.handle(request);\n  }\n\n  private shouldInterceptRequest(request: HttpRequest<any>):boolean{\n    return request.urlWithParams.indexOf('addAuth=true',0) > -1 ? true : false;\n  }\n}\n"],"mappings":";;AAUA,MACaA,eAAe;EAE1BC,YAAqBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;EAAkB;EAEpDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAG,IAAI,CAACC,sBAAsB,CAACF,OAAO,CAAC,EACvC;MACA,MAAMG,WAAW,GAAGH,OAAO,CAACI,KAAK,CAAC;QAChCC,UAAU,EAAE;UACV,eAAe,EAAG,IAAI,CAACP,aAAa,CAACQ,GAAG,CAAC,eAAe;;OAE3D,CAAC;MACF,OAAOL,IAAI,CAACM,MAAM,CAACJ,WAAW,CAAC;;IAEjC,OAAOF,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC3B;EAEQE,sBAAsBA,CAACF,OAAyB;IACtD,OAAOA,OAAO,CAACQ,aAAa,CAACC,OAAO,CAAC,cAAc,EAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK;EAC5E;;;uBAnBWb,eAAe,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA;IAAA;EAAA;;;aAAfjB,eAAe;MAAAkB,OAAA,EAAflB,eAAe,CAAAmB;IAAA;EAAA;;SAAfnB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}