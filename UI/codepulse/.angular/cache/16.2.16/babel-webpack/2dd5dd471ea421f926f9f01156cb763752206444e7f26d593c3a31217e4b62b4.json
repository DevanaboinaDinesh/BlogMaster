{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { AuthService } from '../services/auth.service';\nimport { jwtDecode } from 'jwt-decode';\n// import {k jwtDecode } from 'jwt-decode';\nexport const authGuard = (route, state) => {\n  const cookieService = inject(CookieService);\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  const user = authService.getUser();\n  let token = cookieService.get('Authorization');\n  if (token && user) {\n    token = token.replace('Bearer ', '');\n    const decodedToken = jwtDecode(token);\n    const expirationDate = decodedToken.exp ? decodedToken.exp * 1000 : new Date().getTime();\n    const currentTime = new Date().getTime();\n    if (expirationDate < currentTime) {\n      authService.logout();\n      return router.createUrlTree(['/login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n    } else {\n      if (user.roles.includes('WRITER')) {\n        return true;\n      } else {\n        alert(\"Unauthorized\");\n        return false;\n      }\n    }\n  } else {\n    authService.logout();\n    return router.createUrlTree(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n  }\n  // Check the JWT Token\n};","map":{"version":3,"names":["inject","Router","CookieService","AuthService","jwtDecode","authGuard","route","state","cookieService","authService","router","user","getUser","token","get","replace","decodedToken","expirationDate","exp","Date","getTime","currentTime","logout","createUrlTree","queryParams","returnUrl","url","roles","includes","alert"],"sources":["D:\\Repos\\CodePulse\\UI\\codepulse\\src\\app\\features\\auth\\guards\\auth.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\nimport { CanActivateFn, Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { AuthService } from '../services/auth.service';\nimport { jwtDecode } from 'jwt-decode';\n// import {k jwtDecode } from 'jwt-decode';\n\nexport const authGuard: CanActivateFn = (route, state) => {\n   const cookieService = inject(CookieService);\n   const authService = inject(AuthService);\n   const router = inject(Router);\n   const user = authService.getUser();\n   let token=cookieService.get('Authorization');\n   if(token && user){\n      token = token.replace('Bearer ', '');\n      const decodedToken = jwtDecode(token);\n      const expirationDate = decodedToken.exp? decodedToken.exp* 1000 : new Date().getTime();\n      const currentTime = new Date().getTime();\n      if(expirationDate <currentTime)\n      {\n        authService.logout();\n        return router.createUrlTree(['/login'], {queryParams : {returnUrl : state.url}});\n      }\n      else\n      {\n        if(user.roles.includes('WRITER'))\n        {\n          return true;\n        }\n        else\n        {\n          alert(\"Unauthorized\");\n          return false;\n        }\n      }\n   }\n   else\n   {\n    authService.logout();\n    return router.createUrlTree(['/login'], {queryParams : {returnUrl : state.url}});\n   }\n  // Check the JWT Token\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAwBC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,SAAS,QAAQ,YAAY;AACtC;AAEA,OAAO,MAAMC,SAAS,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EACtD,MAAMC,aAAa,GAAGR,MAAM,CAACE,aAAa,CAAC;EAC3C,MAAMO,WAAW,GAAGT,MAAM,CAACG,WAAW,CAAC;EACvC,MAAMO,MAAM,GAAGV,MAAM,CAACC,MAAM,CAAC;EAC7B,MAAMU,IAAI,GAAGF,WAAW,CAACG,OAAO,EAAE;EAClC,IAAIC,KAAK,GAACL,aAAa,CAACM,GAAG,CAAC,eAAe,CAAC;EAC5C,IAAGD,KAAK,IAAIF,IAAI,EAAC;IACdE,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IACpC,MAAMC,YAAY,GAAGZ,SAAS,CAACS,KAAK,CAAC;IACrC,MAAMI,cAAc,GAAGD,YAAY,CAACE,GAAG,GAAEF,YAAY,CAACE,GAAG,GAAE,IAAI,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IACtF,MAAMC,WAAW,GAAG,IAAIF,IAAI,EAAE,CAACC,OAAO,EAAE;IACxC,IAAGH,cAAc,GAAEI,WAAW,EAC9B;MACEZ,WAAW,CAACa,MAAM,EAAE;MACpB,OAAOZ,MAAM,CAACa,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;QAACC,WAAW,EAAG;UAACC,SAAS,EAAGlB,KAAK,CAACmB;QAAG;MAAC,CAAC,CAAC;KACjF,MAED;MACE,IAAGf,IAAI,CAACgB,KAAK,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAChC;QACE,OAAO,IAAI;OACZ,MAED;QACEC,KAAK,CAAC,cAAc,CAAC;QACrB,OAAO,KAAK;;;GAGlB,MAED;IACCpB,WAAW,CAACa,MAAM,EAAE;IACpB,OAAOZ,MAAM,CAACa,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;MAACC,WAAW,EAAG;QAACC,SAAS,EAAGlB,KAAK,CAACmB;MAAG;IAAC,CAAC,CAAC;;EAElF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}